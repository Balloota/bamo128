/*
* HWR-Berlin, Fachbereich Berufsakademie, Fachrichtung Informatik
* See the file "license.terms" for information on usage and redistribution of this file.
*/

//		BA - Monitor for AVR8 microcontroller in assembler (BAMO128)
//		############################################################
// developed on CharonII with atmega128 and 32K external SRAM
// works on arduinoMega with atmega1280 also

//      When I was your age, we had 8 bit CPUs and assembler!
//	And we liked it!
//	And we didn't complain! (adapted from www.ethernut.de)

; BA-Version 0.0	060102		BA-Berlin bh
; BA-Version 0.1	060309		FHW-Berlin/FB BA, Inf04
; BA-Version 0.2	060701		FHW-Berlin/FB BA, Inf04, Mathias Boehme
; BA-Version 0.21	061201		bh
; BA-Version 0.22	061227		bh
; BA-Version 0.4	091404		HWR-Berlin/FB BA, Inf07
; BA_Version 0.5	091711		bh -> arduinoMega, sysTime, dump sram error
;*****************************************************************************
// bamo128 in boot-flash-section from addr 0xF000 (words)
// c-programms are written to 0 and overwrite page0 (128 words) or 0x80
// asm programms starts at x80 (words)
// page 0 (128 words -> 256 bytes) reserved for monitor (IV-Tab)
// Timer2 with interrupt for step-command
// Timer 1 with interrupt for sysTime milliSec
// atmea128 on CharonII RAM:  0-0x1F (registers), 0x20-0xFF (io space), 0x100-0x10FF internal ram, 0x1100 -0x7FFF ext ram
// arduionoMega: only internal RAM
// monitor stack is located Ramend-0x100 (bytes) downwards
// monitor-ram  from (Ramend-0x100) to Ramend upwards

.NOLIST
#include	<avr/io.h>
.LIST

#include	 "defines.asm"

.global	mainLoop
.global BOOTSTART
.global JToutFlashText
.global JTspaceConOut
.global JTcearScreen
.global JTclearScreenFromPosition
.global JTlfcrConOut
.global JTsetBGColor
.global JTsetFGBlack

#ifndef TESTVERSION 		// real monitor
// real monitor must be programmed in bootsection of flash
// testversion you can load in application flash (with the resident "real monitor")

.org			0,0xff	
// IV-Vector-Table
;################################ iv-tab ##########################################
RESET:			; charonII and arduinoMega with bamo128 starts by 0xf000 on reset
; External Pin, Power-on Reset, Brown-out Reset,
; Watchdog Reset, and JTAG AVR Reset
/*$0000*/	jmp    BOOTSTART    		; Reset Handler

#ifdef CHARON
/*$0002*/ 	jmp    EXT_INT0			; IRQ0 Handler
/*$0004*/       jmp    EXT_INT1  		; IRQ1 Handler
/*$0006*/       jmp    EXT_INT2  		; IRQ2 Handler
/*$0008*/       jmp    EXT_INT3  		; IRQ3 Handler
/*$000A*/       jmp    EXT_INT4  		; IRQ4 Handler
/*$000C*/       jmp    EXT_INT5  		; IRQ5 Handler
/*$000E*/       jmp    EXT_INT6  		; IRQ6 Handler
/*$0010*/       jmp    EXT_INT7  		; IRQ7 Handler
/*$0012*/       jmp    saveCPU			;TIM2_COMP -> used for step and break; Timer2 Compare 
/*$0014*/       jmp    TIM2_OVF  		; Timer2 Overflow Handler
/*$0016*/       jmp    TIM1_CAPT 		; Timer1 Capture Handler
/*$0018*/       jmp    mySysClock		;TIM1_COMPA		; Timer1 CompareA Handler
/*$001A*/       jmp    TIM1_COMPB		; Timer1 CompareB Handler
/*$001C*/       jmp    TIM1_OVF  		; Timer1 Overflow Handler
/*$001E*/       jmp    TIM0_COMP 		; Timer0 Compare Handler
/*$0020*/       jmp    TIM0_OVF  		; Timer0 Overflow Handler
/*$0022*/       jmp    SPI_STC   		; SPI Transfer Complete Handler
/*$0024*/       jmp    USART0_RXC		; USART0 RX Complete Handler
/*$0026*/       jmp    USART0_DRE		; USART0,UDR Empty Handler
/*$0028*/       jmp    USART0_TXC		; USART0 TX Complete Handler
/*$002A*/       jmp    ADCONV       		; ADC Conversion Complete Handler
/*$002C*/       jmp    EE_RDY    		; EEPROM Ready Handler
/*$002E*/       jmp    ANA_COMP  		; Analog Comparator Handler
/*$0030*/       jmp    TIM1_COMPC		; Timer1 CompareC Handler
/*$0032*/       jmp    TIM3_CAPT 		; Timer3 Capture Handler
/*$0034*/       jmp    TIM3_COMPA		; Timer3 CompareA Handler
/*$0036*/       jmp    TIM3_COMPB		; Timer3 CompareB Handler
/*$0038*/       jmp    TIM3_COMPC		; Timer3 CompareC Handler
/*$003A*/       jmp    TIM3_OVF  		; Timer3 Overflow Handler
/*$003C*/       jmp    USART1_RXC		; USART1 RX Complete Handler
/*$003E*/       jmp    USART1_DRE		; USART1,UDR Empty Handler
/*$0040*/       jmp    USART1_TXC		; USART1 TX Complete Handler
/*$0042*/       jmp    TWI       		; Two-wire Serial Interface Interrupt Handler
/*$0044*/       jmp    SPM_RDY   		; SPM Ready Handler
			
EXT_INT0:		; IRQ0 Handler
EXT_INT1:  		; IRQ1 Handler
EXT_INT2:  		; IRQ2 Handler
EXT_INT3:  		; IRQ3 Handler
EXT_INT4:  		; IRQ4 Handler
EXT_INT5:  		; IRQ5 Handler
EXT_INT6:  		; IRQ6 Handler
EXT_INT7:  		; IRQ7 Handler
TIM2_COMP: 		; Timer2 Compare Handler
TIM2_OVF:  		; Timer2 Overflow Handler
TIM1_CAPT: 		; Timer1 Capture Handler
TIM1_COMPA:		; Timer1 CompareA Handler
TIM1_COMPB:		; Timer1 CompareB Handler
TIM1_OVF:  		; Timer1 Overflow Handler
TIM0_COMP:	 	; Timer0 Compare Handler
TIM0_OVF:  		; Timer0 Overflow Handler
SPI_STC:   		; SPI Transfer Complete Handler
USART0_RXC:		; USART0 RX Complete Handler
USART0_DRE:		; USART0,UDR Empty Handler
USART0_TXC:		; USART0 TX Complete Handler
ADCONV:       		; ADC Conversion Complete Handler
EE_RDY:    		; EEPROM Ready Handler
ANA_COMP:  		; Analog Comparator Handler
TIM1_COMPC:		; Timer1 CompareC Handler
TIM3_CAPT: 		; Timer3 Capture Handler
TIM3_COMPA:		; Timer3 CompareA Handler
TIM3_COMPB:		; Timer3 CompareB Handler
TIM3_COMPC:		; Timer3 CompareC Handler
TIM3_OVF:  		; Timer3 Overflow Handler
USART1_RXC:		; USART1 RX Complete Handler
USART1_DRE:		; USART1,UDR Empty Handler
USART1_TXC:		; USART1 TX Complete Handler
TWI:       		; Two-wire Serial Interface Interrupt Handler
SPM_RDY:   		; SPM Ready Handler
#endif //CHARON

#ifdef ARDUINOMEGA
/*0x0002*/        jmp 	EXTINT0        ; IRQ0 Handler
/*0x0004*/        jmp 	EXTINT1        ; IRQ1 Handler
/*0x0006*/        jmp 	EXTINT2        ; IRQ2 Handler
/*0x0008*/        jmp 	EXTINT3        ; IRQ3 Handler
/*0x000A*/        jmp 	EXTINT4        ; IRQ4 Handler
/*0x000C*/        jmp 	EXTINT5        ; IRQ5 Handler
/*0x000E*/        jmp 	EXTINT6        ; IRQ6 Handler
/*0x0010*/        jmp	EXTINT7        ; IRQ7 Handler
/*0x0012*/        jmp	EXTPCINT0      ; PCINT0 Handler
/*0x0014*/        jmp	EXTPCINT1      ; PCINT1 Handler
/*0x0016*/        jmp	EXTPCINT2      ; PCINT2 Handler
/*0X0018*/        jmp	WDT         ; Watchdog Timeout Handler
/*0x001A*/        jmp	saveCPU		; monitor step mode!! TIM2_COMPA  ; Timer2 CompareA Handler
/*0x001C*/        jmp	TIM2_COMPB  ; Timer2 CompareB Handler
/*0x001E*/        jmp	TIM2_OVF    ; Timer2 Overflow Handler
/*0x0020*/        jmp	TIM1_CAPT   ; Timer1 Capture Handler
/*0x0022*/        jmp	mySysClock		;TIM1_COMPA  ; Timer1 CompareA Handler
/*0x0024*/        jmp	TIM1_COMPB  ; Timer1 CompareB Handler
/*0x0026*/        jmp	TIM1_COMPC  ; Timer1 CompareC Handler
/*0x0028*/        jmp	TIM1_OVF    ; Timer1 Overflow Handler
/*0x002A*/        jmp	TIM0_COMPA  ; Timer0 CompareA Handler
/*0x002C*/        jmp	TIM0_COMPB  ; Timer0 CompareB Handler
/*0x002E*/        jmp	TIM0_OVF    ; Timer0 Overflow Handler
/*0x0030*/        jmp	SPI_STC     ; SPI Transfer Complete Handler
/*0x0032*/        jmp	USART0_RXC  ; USART0 RX Complete Handler
/*0x0034*/        jmp	USART0_UDRE ; USART0,UDR Empty Handler
/*0x0036*/        jmp	USART0_TXC  ; USART0 TX Complete Handler
/*0x0038*/        jmp	ANA_COMP    ; Analog Comparator Handler
/*0x003A*/        jmp	ADCONV      ; ADC Conversion Complete Handler
/*0x003C*/        jmp	EE_RDY      ; EEPROM Ready Handler
/*0x003E*/        jmp	TIM3_CAPT   ; Timer3 Capture Handler
/*0x0040*/        jmp	TIM3_COMPA  ; Timer3 CompareA Handler
/*0x0042*/        jmp	TIM3_COMPB  ; Timer3 CompareB Handler
/*0x0044*/        jmp	TIM3_COMPC  ; Timer3 CompareC Handler
/*0x0046*/        jmp     TIM3_OVF          ; Timer3 Overflow Handler
/*0x0048*/        jmp     USART1_RXC        ; USART1 RX Complete Handler
/*0x004A*/        jmp     USART1_UDRE       ; USART1,UDR Empty Handler
/*0x004C*/        jmp     USART1_TXC        ; USART1 TX Complete Handler
/*0x004E*/        jmp     TWI               ; 2-wire Serial Handler
/*0x0050*/        jmp     SPM_RDY           ; SPM Ready Handler
/*0x0052*/        jmp     TIM4_CAPT         ; Timer4 Capture Handler
/*0x0054*/        jmp     TIM4_COMPA        ; Timer4 CompareA Handler
/*0x0056*/        jmp     TIM4_COMPB        ; Timer4 CompareB Handler
/*0x0058*/        jmp     TIM4_COMPC        ; Timer4 CompareC Handler
/*0x005A*/        jmp     TIM4_OVF          ; Timer4 Overflow Handler
/*0x005C*/        jmp     TIM5_CAPT         ; Timer5 Capture Handler
/*0x005E*/        jmp     TIM5_COMPA        ; Timer5 CompareA Handler
/*0x0060*/        jmp     TIM5_COMPB        ; Timer5 CompareB Handler
/*0x0062*/        jmp     TIM5_COMPC        ; Timer5 CompareC Handler
/*0x0064*/        jmp     TIM5_OVF          ; Timer5 Overflow Handler
/*0x0066*/        jmp     USART2_RXC        ; USART2 RX Complete Handler
/*0x0068*/        jmp     USART2_UDRE       ; USART2,UDR Empty Handler
/*0x006A*/        jmp     USART2_TXC        ; USART2 TX Complete Handler
/*0x006C*/        jmp     USART3_RXC        ; USART3 RX Complete Handler
/*0x006E*/        jmp     USART3_UDRE       ; USART3,UDR Empty Handler
/*0x0070*/        jmp     USART3_TXC        ; USART3 TX Complete Handler
EXTINT0:
EXTINT1:
EXTINT2:
EXTINT3:
EXTINT4:
EXTINT5:
EXTINT6:
EXTINT7:
EXTPCINT0:
EXTPCINT1:
EXTPCINT2:
WDT:
TIM2_COMPA:
TIM2_COMPB:
TIM2_OVF:
TIM1_CAPT:
TIM1_COMPA:
TIM1_COMPB:
TIM1_COMPC:
TIM1_OVF:
TIM0_COMPA:
TIM0_COMPB:
TIM0_OVF:
SPI_STC:
USART0_RXC:
USART0_UDRE:
USART0_TXC:
ANA_COMP:
ADCONV:
EE_RDY:
TIM3_CAPT:
TIM3_COMPA:
TIM3_COMPB:
TIM3_COMPC:
TIM3_OVF:
USART1_RXC:
USART1_UDRE:
USART1_TXC:
TWI:
SPM_RDY:
TIM4_CAPT:
TIM4_COMPA:
TIM4_COMPB:
TIM4_COMPC:
TIM4_OVF:
TIM5_CAPT:
TIM5_COMPA:
TIM5_COMPB:
TIM5_COMPC:
TIM5_OVF:
USART2_RXC:
USART2_UDRE:
USART2_TXC:
USART3_RXC:
USART3_UDRE:
USART3_TXC:
#endif	// ARDUINOMEGA
			rjmp RESET
#endif //!testversion

// this works in bootsection
.org			BYTES(MONSTART),0xff	// 0x80 or 0xf000
BOOTSTART:		cli			;  no interrupt when stack is changed
			rjmp	startMonitor
/* jump table with useful addresses for linking at application programs*/
			jmp	mainLoop			// BOOTSTART+2
			jmp	conIn				// BOOTSTART+4
			jmp	conOut				// BOOTSTART+6
			jmp	conStat				// BOOTSTART+8
			jmp	echo				// BOOTSTART+10
JToutFlashText:		jmp	outFlashText		// BOOTSTART+12
			jmp	conIn2Hex			// BOOTSTART+14
			jmp	conInByteSupWS	// BOOTSTART+16
			jmp	conInAdrSupWS			// BOOTSTART+18
			jmp	switchCase		// BOOTSTART+20
			jmp	testHex			// BOOTSTART+22
			jmp	hex2Ascii			// BOOTSTART+24
			jmp	loadInSRam		// BOOTSTART+26
			jmp	byteConOut		// BOOTSTART+28
			jmp	asciiConOut		// BOOTSTART+30
JTlfcrConOut:		jmp	lfcrConOut			// BOOTSTART+32
JTspaceConOut:		jmp	spaceConOut		// BOOTSTART+34
JTclearScreen:		jmp	clearScreen		// BOOTSTART+36
			jmp	clearLine			// BOOTSTART+38
			jmp	convert2LowerCase		// BOOTSTART+40
			jmp	setFGColor		// BOOTSTART+42
JTsetBGColor:		jmp	setBGColor		// BOOTSTART+44
			jmp	getEEPromByte	// BOOTSTART+46
			jmp	setEEPromByte	// BOOTSTART+48
			jmp	getFlashWord		// BOOTSTART+50
JTclearScreenFromPosition:	jmp	clearScreenFromPosition			// BOOTSTART+52
JTsetFGBlack:		jmp	setFGBlack				// BOOTSTART+54
			jmp	mySysClock				// BOOTSTART+56
			jmp	startTimer1				// BOOTSTART+58
			jmp	stopTimer1				// BOOTSTART+60
			jmp	saveCPU		//Time2Comp			// BOOTSTART+62	
						// jump for interrupt in step mode
			jmp	disAss		// BOOTSTART+64
			jmp	upLoadFlashWithOffset // BOOTSTART+66 page: 0..512 arg in X
			jmp	getFlashByte	// BOOTSTART+68 only upper half of flash

; timer 1 interrupt service routine , sysclock millisec
mySysClock:	// timer1 interrupt service routine increment SYSTIME every millisec
		push ZL		
		push ZH
		push argVL
		in argVL,_SFR_IO_ADDR(SREG)
		push argVL
		ldi ZL, lo8(SYSTIME)
		ldi ZH,hi8(SYSTIME)
mySysClock1:	ld argVL,Z
		inc argVL
		st Z+,argVL
		brne mySysClock2
		cpi ZL,0x04
		brne mySysClock1
mySysClock2:	pop argVL
		out _SFR_IO_ADDR(SREG),argVL
		pop argVL
		pop ZH
		pop ZL
		reti
