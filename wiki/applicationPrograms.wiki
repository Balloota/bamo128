#summary bamo128 and arduino sketches and C/C++/asm - application programs

You can upload application programs bamo128 from the arduino IDE or with the 'w' and 'W' - command from monitor. Programs are loaded at flash address 0 normally.<br>
This programs overwrite the interrupt vector table at address 0 and if you activate the timer1 in "mainloop.asm" the system crash. It crashed also, if you use the monitor 's' (step) or 'x'(start with breakpoint because it is realized with time2 interrupt. But you can avoid this, if you in your C/C++/Arduino-sourcecode insert this lines (for atmega1280 or atmega328):<br>
{{{
#define	BYTES(word)	((word)*2)
#define	STRING(a,b)	#a" "#b
#define	INLINEASM(a,b)	STRING(a,b)

#ifdef  __AVR_ATmega1280__		// arduinoMega
#define	LARGEBOOTSTART	0xf000
#define	BOARDRAMEND	0x2200
#define	MONSTART	LARGEBOOTSTART
#elif __AVR_ATmega328P__		// arduinoDuemilanove
#define	LARGEBOOTSTART	0x3000
#define	BOARDRAMEND	0x900
#define	MONSTART	LARGEBOOTSTART
#endif	

#define MONRAM		(BOARDRAMEND-0x100)
#define	SYSTIMEMILLISEC	(MONRAM+0x40)
#define saveCPU		BYTES(LARGEBOOTSTART+62)	// time2Comp interrupt
#define mySysClock      BYTES(LARGEBOOTSTART+56)	// timer1 overflow int

// monitor interrupt f√ºr step ...
ISR(TIMER2_COMPA_vect) __attribute__ ((naked));
ISR(TIMER2_COMPA_vect) {asm volatile  (INLINEASM(jmp,saveCPU));}

 /* monitor interrupt for sysclock millisec */
ISR(TIMER1_COMPA_vect) __attribute__ ((naked));
ISR(TIMER1_COMPA_vect) {asm volatile  (INLINEASM(jmp,mySysClock));}

void code_init2() __attribute__ ((naked, section (".init2")));

/* !!! never call this function !!! */
void code_init2 (void)
{
#ifdef __AVR_ATmega1280__		// arduinoMega
   SP = 0x2100;
#elif __AVR_ATmega328P__		// arduinoDuemilanove
   SP = 0x800; 
#endif
}
}}}